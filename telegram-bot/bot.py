import json
import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime
from telegram import (
    Update, InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

DATA_FILE = "data.json"
TASKS_FILE = "tasks.json"

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

if not os.path.exists(TASKS_FILE):
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

def load_data():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_tasks():
    with open(TASKS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_tasks(tasks):
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {"balance": 0, "withdraws": 0}
        save_data(data)
    buttons = [
        [KeyboardButton("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")],
        [KeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥")],
        [KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞/—Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")],
    ]
    if update.effective_user.id == ADMIN_ID:

        buttons.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")])

    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –æ–Ω–ª–∞–π–Ω.",
        reply_markup=keyboard
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è":
        await show_tasks(update, context)
    elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        await show_balance(update, context)
    elif text == "üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥":
        await request_withdraw(update, context)
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞/—Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º":
        await contact_support(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ" and update.effective_user.id == ADMIN_ID:
        await start_add_task(update, context)

async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    tasks = load_tasks()
    keyboard = []
    for task_id, task in tasks.items():
        if user_id not in task.get("completed_by", []) and user_id not in task.get("taken_by", []):
            keyboard.append([InlineKeyboardButton(task["title"], callback_data=f"take_{task_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    balance = data.get(user_id, {}).get("balance", 0)
    await update.message.reply_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚Ç∏")

async def request_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    user_data = data.get(user_id, {})
    balance = user_data.get("balance", 0)
    withdraws = user_data.get("withdraws", 0)

    if (withdraws == 0 and balance < 1000) or (withdraws > 0 and balance < 5000):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        return

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ–Ω–≥–µ:")
    context.user_data["awaiting_withdraw_amount"] = True

async def contact_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ @Sofia010821")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "add_task" in context.user_data:
        step = context.user_data["add_task"]["step"]
        if step == "title":
            await ask_task_instruction(update, context)
        elif step == "instruction":
            await ask_task_limit(update, context)
        elif step == "limit":
            await save_new_task(update, context)
        return

    user_id = str(update.effective_user.id)
    data = load_data()

    if context.user_data.get("awaiting_withdraw_amount"):
        try:
            amount = int(update.message.text.strip())
            balance = data[user_id]["balance"]
            withdraws = data[user_id]["withdraws"]

            if (withdraws == 0 and amount < 1000) or (withdraws > 0 and amount < 5000):
                await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1000/5000 —Ç–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏.")
                return

            if amount > balance:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                return

            data[user_id]["balance"] -= amount
            data[user_id]["withdraws"] += 1
            save_data(data)

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"""‚úâ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
–ë–∞–ª–∞–Ω—Å: {balance} —Ç–≥
–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} —Ç–≥"""
            )
            await update.message.reply_text("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except:
            await update.message.reply_text("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        finally:
            context.user_data["awaiting_withdraw_amount"] = False

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    tasks = load_tasks()

    if query.data == "back":
        await start(update, context)
        return

    if query.data.startswith("take_"):
        task_id = query.data.split("_")[1]
        task = tasks.get(task_id)
        if not task:
            await query.edit_message_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if user_id in task.get("taken_by", []):
            await query.edit_message_text("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.")
            return

        if "limit" in task and len(task.get("taken_by", [])) >= task["limit"]:
            await query.edit_message_text("–õ–∏–º–∏—Ç –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –∏—Å—á–µ—Ä–ø–∞–Ω.")
            return

        task.setdefault("taken_by", []).append(user_id)
        save_tasks(tasks)

        await context.bot.send_message(
            chat_id=user_id,
            text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: {task['title']}\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {task['instruction']}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∫ –æ—Ç—á–µ—Ç."
        )
        context.user_data["current_task"] = task_id

async def report_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if "current_task" not in context.user_data:
        return
    task_id = context.user_data["current_task"]
    tasks = load_tasks()
    task = tasks.get(task_id)
    if not task:
        return

    content = update.message.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id

    msg = (
    f"‚úè –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
    f"–ó–∞–¥–∞–Ω–∏–µ: {task['title']}\n"
    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {content}"
)
    await context.bot.send_message(chat_id=REVIEW_CHAT_ID, text=msg)
    if file_id:
        await context.bot.send_photo(chat_id=REVIEW_CHAT_ID, photo=file_id)

    task.setdefault("completed_by", []).append(user_id)
    task["taken_by"].remove(user_id)
    save_tasks(tasks)

    context.user_data.pop("current_task")
    await update.message.reply_text("–í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ.")

async def start_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è:")
    context.user_data["add_task"] = {"step": "title"}

async def ask_task_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_task"]["title"] = update.message.text.strip()
    context.user_data["add_task"]["step"] = "instruction"
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –∑–∞–¥–∞–Ω–∏—é:")

async def ask_task_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_task"]["instruction"] = update.message.text.strip()
    context.user_data["add_task"]["step"] = "limit"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5). –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")

async def save_new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        limit = int(update.message.text.strip())
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    task_data = context.user_data["add_task"]
    task_data["limit"] = limit

    tasks = load_tasks()
    task_id = str(uuid4())[:8]
    tasks[task_id] = {
        "title": task_data["title"],
        "instruction": task_data["instruction"],
        "limit": limit if limit > 0 else None,
        "taken_by": [],
        "completed_by": []
    }
    save_tasks(tasks)

    await —Åupdate.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    context.user_data.pop("add_task", None)
PORT = int(os.environ.get("PORT", 8000))

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_http_server():
    server = HTTPServer(('', PORT), Handler)
    print(f"HTTP server running on port {PORT}")
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–µ—à–∞–ª –±–æ—Ç—É
threading.Thread(target=run_http_server, daemon=True).start()
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(CallbackQueryHandler(callback_query_handler))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL, report_handler))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
